name: Calendar Versioning Tag (Test)

on:
  push:
    branches:
      - "**"

jobs:
  tag:
    runs-on: ubuntu-latest
    env:
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up GPG
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg

          rm -f ~/.gnupg/gpg.conf ~/.gnupg/gpg-agent.conf

          echo "use-agent" > ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf

          echo "$GPG_PRIVATE_KEY" | gpg --batch --import

          gpgconf --kill gpg-agent || true
          gpgconf --launch gpg-agent

          git config --global user.name "Pritish Budhiraja"
          git config --global user.email "pritish.budhiraja@gmail.com"
          git config --global commit.gpgsign true
          git config --global tag.gpgSign true
          git config --global gpg.program gpg
          git config --global gpg.format openpgp

      - name: Get formatted date (YYYY.MM.DD)
        id: get-date
        run: echo "date=$(date -u '+%Y.%m.%d')" >> "$GITHUB_OUTPUT"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Determine next tag version
        id: get-next-tag
        run: |
          DATE_PREFIX=${{ steps.get-date.outputs.date }}
          EXISTING_TAGS=$(git tag -l "${DATE_PREFIX}.*" | sort)
          COUNT=$(echo "$EXISTING_TAGS" | grep -c . || true)
          VERSION=$(printf "%02d" $COUNT)
          TAG="${DATE_PREFIX}.${VERSION}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Update package.json version
        run: |
          TAG_VERSION="${{ steps.get-next-tag.outputs.tag }}"
          jq --arg v "$TAG_VERSION" '.version = $v' package.json > tmp.json && mv tmp.json package.json
          git add package.json
          git commit -m "chore: update package.json version to $TAG_VERSION"
          git push origin HEAD

      - name: GPG sign and push tag
        run: |
          echo "$GPG_PASSPHRASE" | \
            gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 \
            --local-user "$GPG_KEY_ID" \
            --output /dev/null \
            --sign

          git tag -s "${{ steps.get-next-tag.outputs.tag }}" -m "${{ steps.get-next-tag.outputs.tag }}"
          git push origin "${{ steps.get-next-tag.outputs.tag }}"
