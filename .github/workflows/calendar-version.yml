name: Calendar Versioning Tag (Test)

on:
  push:
    branches:
      - "**"

env:
  GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up GPG
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg

          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf

          git config --global user.name "Pritish Budhiraja"
          git config --global user.email "pritish.budhiraja@gmail.com"
          git config --global commit.gpgsign true
          git config --global tag.gpgSign true
          git config --global gpg.program gpg
          git config --global gpg.format openpgp

      - name: Get formatted date (YYYY.MM.DD)
        id: get-date
        run: echo "date=$(date -u '+%Y.%m.%d')" >> "$GITHUB_OUTPUT"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Determine next tag version
        id: get-next-tag
        run: |
          DATE_PREFIX=${{ steps.get-date.outputs.date }}
          EXISTING_TAGS=$(git tag -l "${DATE_PREFIX}.*" | sort)
          COUNT=$(echo "$EXISTING_TAGS" | grep -c . || true)
          VERSION=$(printf "%02d" $COUNT)
          TAG="${DATE_PREFIX}.${VERSION}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Update package.json version and commit
        env:
          TAG_VERSION: ${{ steps.get-next-tag.outputs.tag }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          jq --arg v "$TAG_VERSION" '.version = $v' package.json > tmp.json && mv tmp.json package.json
          git add package.json

          echo "$GPG_PASSPHRASE" | \
            git commit -S --gpg-sign="$GPG_KEY_ID" --no-verify \
            -m "chore: update package.json version to $TAG_VERSION" || echo "Nothing to commit"

          git push origin HEAD

      - name: Create and push signed tag
        env:
          TAG_VERSION: ${{ steps.get-next-tag.outputs.tag }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "$GPG_PASSPHRASE" | \
            gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 \
            --local-user "$GPG_KEY_ID" \
            --output /dev/null \
            --sign

          git tag -s "$TAG_VERSION" -m "$TAG_VERSION"
          git push origin "$TAG_VERSION"
