name: Stable Release

on:
  workflow_dispatch:
    inputs:
      version_mode:
        description: "Version mode"
        required: true
        default: "auto"
        type: choice
        options:
          - auto
          - custom
      version_type:
        description: "Auto-bump type (patch/minor/major)"
        required: false
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      stable_version:
        description: "Custom version number (e.g., 1.2.3) (only used in custom mode)"
        required: false
        type: string
      release_notes:
        description: "Release notes (optional)"
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Check admin permissions
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Get the user who triggered the workflow
              const actor = context.actor;
              console.log(`üîç Checking permissions for user: ${actor}`);
              
              // Check if the user has admin permissions
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: actor
              });
              
              console.log(`üìã User permission level: ${permission.permission}`);
              
              // Allow admin and maintain permissions
              const allowedPermissions = ['admin', 'maintain'];
              
              if (!allowedPermissions.includes(permission.permission)) {
                console.log(`‚ùå Access denied for user: ${actor}`);
                console.log(`   Required permission: admin or maintain`);
                console.log(`   Current permission: ${permission.permission}`);
                
                core.setFailed(`üö´ Access Denied: Only repository admins can run this workflow. Your permission level: ${permission.permission}`);
                return;
              }
              
              console.log(`‚úÖ Access granted for user: ${actor} (${permission.permission})`);
              
            } catch (error) {
              console.log(`‚ùå Error checking permissions: ${error.message}`);
              core.setFailed(`üö´ Permission check failed: ${error.message}`);
            }

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Validate and process version
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "üìã Current version: $CURRENT_VERSION"

          # Function to bump version
          bump_version() {
            local version=$1
            local type=$2
            
            IFS='.' read -ra VERSION_PARTS <<< "$version"
            local major=${VERSION_PARTS[0]}
            local minor=${VERSION_PARTS[1]}
            local patch=${VERSION_PARTS[2]}
            
            case $type in
              "major")
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              "minor")
                minor=$((minor + 1))
                patch=0
                ;;
              "patch")
                patch=$((patch + 1))
                ;;
            esac
            
            echo "$major.$minor.$patch"
          }

          # Function to compare versions (returns 0 if new_version >= current_version, 1 if new_version < current_version)
          is_version_valid() {
            local new_version=$1
            local current_version=$2
            
            echo "üîç Debug: Comparing versions - new: $new_version, current: $current_version"
            
            # Split versions into arrays
            IFS='.' read -ra NEW_PARTS <<< "$new_version"
            IFS='.' read -ra CURRENT_PARTS <<< "$current_version"
            
            # Compare major, minor, patch
            for i in 0 1 2; do
              local new_part=${NEW_PARTS[$i]:-0}
              local current_part=${CURRENT_PARTS[$i]:-0}
              
              echo "üîç Debug: Comparing part $i - new: $new_part, current: $current_part"
              
              if [ "$new_part" -gt "$current_part" ]; then
                echo "üîç Debug: New version is higher (part $i: $new_part > $current_part)"
                return 0  # new_version > current_version (valid)
              elif [ "$new_part" -lt "$current_part" ]; then
                echo "üîç Debug: New version is lower (part $i: $new_part < $current_part)"
                return 1  # new_version < current_version (invalid)
              fi
              # If equal, continue to next part
            done
            
            echo "üîç Debug: Versions are equal"
            return 0  # new_version == current_version (valid)
          }

          # Determine version based on mode
          VERSION_MODE="${{ github.event.inputs.version_mode }}"

          echo "üîç Debug: VERSION_MODE = '$VERSION_MODE'"
          echo "üîç Debug: Custom version input = '${{ github.event.inputs.stable_version }}'"

          if [ "$VERSION_MODE" = "auto" ]; then
            # Auto-bump version
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            NEW_VERSION=$(bump_version "$CURRENT_VERSION" "$VERSION_TYPE")
            echo "üîÑ Auto-bumping $VERSION_TYPE version: $CURRENT_VERSION ‚Üí $NEW_VERSION"
          elif [ "$VERSION_MODE" = "custom" ]; then
            # Custom version
            NEW_VERSION="${{ github.event.inputs.stable_version }}"
            
            echo "üîç Debug: Processing custom version: '$NEW_VERSION'"
            
            if [ -z "$NEW_VERSION" ] || [ "$NEW_VERSION" = "null" ]; then
              echo "‚ùå VALIDATION FAILED: Custom version cannot be empty when mode is 'custom'"
              echo "   Please provide a valid version number (e.g., 1.2.3)"
              echo "üö´ Workflow stopped due to validation failure."
              exit 1
            fi
            
            # Validate version format (basic semver check)
            if ! [[ "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "‚ùå VALIDATION FAILED: Invalid version format: '$NEW_VERSION'"
              echo "   Version must follow semantic versioning format (e.g., 1.2.3)"
              echo "üö´ Workflow stopped due to validation failure."
              exit 1
            fi
            
            echo "üîç Debug: About to validate version comparison..."
            
            # Check if new version is not lower than current version
            if is_version_valid "$NEW_VERSION" "$CURRENT_VERSION"; then
              echo "‚úÖ Validation passed: Using custom version: $CURRENT_VERSION ‚Üí $NEW_VERSION"
            else
              echo "‚ùå VALIDATION FAILED: Custom version $NEW_VERSION is LOWER than current version $CURRENT_VERSION"
              echo "   New version must be equal to or higher than the current version"
              echo "   Current: $CURRENT_VERSION"
              echo "   Provided: $NEW_VERSION"
              echo "   Please provide a version >= $CURRENT_VERSION"
              echo ""
              echo "üö´ Workflow stopped due to validation failure. No PR, tag, or release will be created."
              exit 1
            fi
          else
            echo "‚ùå VALIDATION FAILED: Invalid version mode: '$VERSION_MODE'"
            echo "   Valid modes are: 'auto' or 'custom'"
            echo "üö´ Workflow stopped due to validation failure."
            exit 1
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "‚úÖ Version will be bumped from $CURRENT_VERSION to $NEW_VERSION"

      - name: Update package.json version
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          # Update package.json
          node -e "
            const fs = require('fs');
            const pkg = require('./package.json');
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

          echo "‚úÖ Updated package.json to version $NEW_VERSION"

      - name: Create version bump branch and commit
        id: version_bump
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          BRANCH_NAME="release/bump-version-to-$NEW_VERSION"

          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

          # Check if branch exists remotely and delete it
          if git ls-remote --exit-code --heads origin "$BRANCH_NAME" >/dev/null 2>&1; then
            echo "üóëÔ∏è Branch $BRANCH_NAME already exists remotely, deleting it"
            git push origin --delete "$BRANCH_NAME" || true
          fi

          # Check if branch exists locally and delete it
          if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
            echo "üóëÔ∏è Branch $BRANCH_NAME exists locally, deleting it"
            git branch -D "$BRANCH_NAME" || true
          fi

          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME"

          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION"
          git push origin "$BRANCH_NAME"

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Created branch $BRANCH_NAME and committed version bump"

      - name: Create Pull Request (with fallback)
        id: cpr
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const newVersion = '${{ steps.version.outputs.new_version }}';
            const branchName = '${{ steps.version_bump.outputs.branch_name }}';
            const repoUrl = `https://github.com/${{ github.repository }}`;
            const prUrl = `${repoUrl}/compare/master...${branchName}?expand=1`;

            const prBody = `## Version Bump to ${newVersion}

            This PR bumps the version from ${{ steps.version.outputs.current_version }} to ${newVersion}.

            **Changes:**
            - Updated \`package.json\` version field

            This PR was automatically created by the stable release workflow.

            Please review and merge this PR to proceed with the release process.`;

            try {
              // Try to create PR automatically
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `release: v${newVersion}`,
                head: branchName,
                base: 'master',
                body: prBody
              });

              console.log(`‚úÖ Successfully created PR automatically: ${pr.data.html_url}`);

              // Set outputs for success case
              core.setOutput('pull-request-number', pr.data.number);
              core.setOutput('pull-request-url', pr.data.html_url);
              core.setOutput('pull-request-operation', 'created');
              core.setOutput('pull-request-branch', branchName);

            } catch (error) {
              console.log(`‚ö†Ô∏è Failed to create PR automatically: ${error.message}`);
              console.log(`üîó Create PR manually at: ${prUrl}`);

              // Set outputs for failure case
              core.setOutput('pull-request-number', '');
              core.setOutput('pull-request-url', '');
              core.setOutput('pull-request-operation', 'failed');
              core.setOutput('pull-request-branch', branchName);
            }

      - name: Display PR Creation Results
        uses: actions/github-script@v7
        with:
          script: |
            const newVersion = '${{ steps.version.outputs.new_version }}';
            const prNumber = '${{ steps.cpr.outputs.pull-request-number }}';
            const prUrl = '${{ steps.cpr.outputs.pull-request-url }}';
            const prOperation = '${{ steps.cpr.outputs.pull-request-operation }}';
            const branchName = '${{ steps.cpr.outputs.pull-request-branch }}' || `release/bump-version-to-${newVersion}`;
            const repoUrl = `https://github.com/${{ github.repository }}`;
            const manualPrUrl = `${repoUrl}/compare/master...${branchName}?expand=1`;

            const prBody = `## Version Bump to ${newVersion}

            This PR bumps the version from ${{ steps.version.outputs.current_version }} to ${newVersion}.

            **Changes:**
            - Updated \`package.json\` version field

            This PR was created following the stable release workflow.

            Please review and merge this PR to proceed with the release process.`;

            if (prNumber) {
              console.log(`‚úÖ Successfully ${prOperation} PR #${prNumber}: ${prUrl}`);
              
              // Success summary
              core.summary
                .addHeading('üéâ Version Bump PR Created Successfully')
                .addTable([
                  [{data: 'Previous Version', header: true}, {data: 'New Version', header: true}, {data: 'PR Number', header: true}, {data: 'Operation', header: true}],
                  ['${{ steps.version.outputs.current_version }}', newVersion, `#${prNumber}`, prOperation]
                ])
                .addLink('View Pull Request', prUrl)
                .addRaw('<br><br>**Next Steps:** Review and merge the PR above, then the release will be ready!')
                .write();
            } else {
              console.log(`‚ö†Ô∏è Automatic PR creation failed or no changes detected`);
              console.log(`üîó Create PR manually at: ${manualPrUrl}`);
              
              // Fallback summary with manual instructions
              core.summary
                .addHeading('üìã Version Bump Changes Ready')
                .addTable([
                  [{data: 'Previous Version', header: true}, {data: 'New Version', header: true}, {data: 'Branch', header: true}],
                  ['${{ steps.version.outputs.current_version }}', newVersion, branchName]
                ])
                .addHeading('‚ö†Ô∏è Automatic PR Creation Failed')
                .addRaw(`<p><strong>Reason:</strong> The peter-evans/create-pull-request action failed or detected no changes.</p>`)
                .addHeading('üîß How to Enable Automatic PR Creation')
                .addRaw(`<p>To enable automatic PR creation, you have several options:</p>`)
                .addList([
                  '**Option 1:** Go to Settings ‚Üí Actions ‚Üí General ‚Üí Workflow permissions ‚Üí Check "Allow GitHub Actions to create and approve pull requests"',
                  '**Option 2:** Create a Personal Access Token (PAT) with repo permissions and add it as GH_PAT secret',
                  '**Option 3:** Use the manual PR creation below (current fallback)'
                ])
                .addHeading('üîó Create Pull Request Manually')
                .addRaw(`<p><strong>Changes are ready!</strong> Please create the PR manually using the link below.</p>`)
                .addLink('Click here to create the PR', manualPrUrl)
                .addHeading('üìù Suggested PR Details')
                .addRaw(`<p><strong>Title:</strong> <code>release: v${newVersion}</code></p>`)
                .addRaw(`<p><strong>Description:</strong></p>`)
                .addCodeBlock(prBody, 'markdown')
                .addRaw('<br><br>**Next Steps:** Create and merge the PR above, then the release will be ready!')
                .write();
            }

      - name: Generate release notes for manual use
        id: release_notes
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          CURRENT_VERSION="${{ steps.version.outputs.current_version }}"

          # Get commits since last version
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" --max-count=10)
          fi

          # Prepare release notes
          RELEASE_NOTES="${{ github.event.inputs.release_notes }}"

          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="## What's Changed

          $COMMITS

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...v$NEW_VERSION"
          fi

          # Save release notes to file for display
          echo "$RELEASE_NOTES" > release_notes.md
          echo "‚úÖ Generated release notes for manual use"

      - name: Create and push tag
        id: tag
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          TAG_NAME="v$NEW_VERSION"

          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin "$TAG_NAME"

          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Created and pushed tag: $TAG_NAME"

      - name: Create GitHub Release (Draft)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const newVersion = '${{ steps.version.outputs.new_version }}';
            const tagName = '${{ steps.tag.outputs.tag_name }}';
            const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');

            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `Release ${tagName}`,
              body: releaseNotes,
              draft: true,
              prerelease: false
            });

            console.log(`‚úÖ Created draft release: ${release.data.html_url}`);

            // Add a summary
            core.summary
              .addHeading('üöÄ Release Created Successfully')
              .addTable([
                [{data: 'Previous Version', header: true}, {data: 'New Version', header: true}, {data: 'Tag', header: true}],
                ['${{ steps.version.outputs.current_version }}', newVersion, tagName]
              ])
              .addLink('View Draft Release', release.data.html_url)
              .write();

      - name: Display next steps
        uses: actions/github-script@v7
        with:
          script: |
            const newVersion = '${{ steps.version.outputs.new_version }}';
            const branchName = '${{ steps.cpr.outputs.pull-request-branch }}';

            // Add detailed next steps to summary
            core.summary
              .addHeading('üìã Next Steps - Review and Publish')
              .addTable([
                [{data: 'Previous Version', header: true}, {data: 'New Version', header: true}, {data: 'Branch', header: true}],
                ['${{ steps.version.outputs.current_version }}', newVersion, branchName || 'release/bump-version-to-' + newVersion]
              ])
              .addHeading('üîÑ Manual Steps Required')
              .addList([
                '1. Review and merge the version bump PR above',
                '2. Review and publish the draft release above',
                '3. The tag has already been created and pushed'
              ])
              .addRaw('<br><br>**Note:** The draft release and tag have been created automatically. Just review and merge the PR, then publish the release!')
              .write();

      - name: Cleanup
        run: |
          rm -f release_notes.md
